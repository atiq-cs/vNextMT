namespace Parser {
  using System;
  using System.Threading.Tasks;
  using System.Collections.Generic;
  using System.Text.Json;
  using System.Text;

  /// <summary>
  /// Command Line Arguments
  /// </summary>
  class CLArgs {
    public string Vertical {get; set;}
    // Indicates where rules are manually generated
    public bool IsAutoGeneratedRuleFile {get; set;}
    // Whether to generate request params
    public bool ShouldGenParams {get; set;}

    public CLArgs(string vertical, bool isAutoGen, bool shouldGenerateParams) {
      Vertical = vertical;
      IsAutoGeneratedRuleFile = isAutoGen;
      ShouldGenParams = shouldGenerateParams;
    }
  }

  /// <summary>
  /// Key Value pairs read from Json Config
  /// </summary>
  class JsonKV {
    public string Vertical { get; set; }
    public string InputFilePath { get; set; }
    public string OutputFilePath { get; set; }
    public string HeadTag { get; set; }
    public string TailTag { get; set; }
    public string RuleNameHead { get; set; }
    public List<string> Filters { get; set; }
    public string DisableParamTag { get; set; }
    public List<string> IncludeExpRules { get; set; }

    public JsonKV() {
      Vertical = string.Empty;
    }
  }


  /// <summary>
  /// vNextRule
  /// </summary>
  class AppSettings {
    public CLArgs CLA { get; set; }
    public JsonKV Json { get; set; }

    public void SetCLArgs(string vertical, bool isManual, bool shouldGenerateParams) {
      CLA = new CLArgs(vertical, isManual, shouldGenerateParams);
    }


    /// <summary>
    /// Convert Pascal Case to Snake Case
    /// </summary>
    private string ToSnakeCase(string str) {
      var sb = new StringBuilder();

      foreach( var ch in str) {
        if (char.IsUpper(ch))
          sb.Append('_');
        sb.Append(char.ToLower(ch));
      }

      return sb.ToString().Substring(1);
    }


    public async Task LoadJson() {
      var JsonConfigFilePath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)
        + @"\vNextMTConfig.json";

      if (!System.IO.File.Exists(JsonConfigFilePath)) {
        throw new InvalidOperationException($"Required config: {JsonConfigFilePath} not found!" + 
          "Please create the config file and run this application again.");
      }

      using System.IO.FileStream openStream = System.IO.File.OpenRead(JsonConfigFilePath);
      var rootElement = await JsonSerializer.DeserializeAsync<JsonElement>(openStream);

      // Will throw exception if invalid vertical is specified
      var verticalJson = rootElement.GetProperty(CLA.Vertical);
      Json = JsonSerializer.Deserialize<JsonKV>(verticalJson);

      // TODO: validate the input CLA vertical
      if (Json.Vertical == string.Empty)
        Json.Vertical = ToSnakeCase(CLA.Vertical);

      if (CLA.IsAutoGeneratedRuleFile) {
        var autoGenKey = "AutoGen";
        var autoGenJsonElem = rootElement.GetProperty(autoGenKey);
        var autoGenJson = JsonSerializer.Deserialize<JsonKV>(autoGenJsonElem);

        Json.InputFilePath = System.IO.Path.Join(System.IO.Path.GetDirectoryName(Json.InputFilePath)
          , Json.Vertical + "_mt.py");
        Json.HeadTag = autoGenJson.HeadTag;
        Json.TailTag = autoGenJson.TailTag;
        Json.RuleNameHead = autoGenJson.RuleNameHead;
      }
    }


    // Debugging purpose
    public void Display() {
      Console.WriteLine($"CLA Vertical: {CLA.Vertical}");
      Console.WriteLine($"Json Vertical: {Json.Vertical}");
      Console.WriteLine($"input file path: {Json.InputFilePath}");
      Console.WriteLine($"output file path: {Json.OutputFilePath}");
    }
  }
}
