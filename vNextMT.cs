// Copyright (c) FFTSys Inc. All rights reserved.
// Use of this source code is governed by a GPL-v3 license

namespace Parser {
  using System.IO;
  using System.Text;
  using System.Threading.Tasks;
  using System.Collections.Generic;

  /// <summary>
  /// vNext Migration Tool
  /// Main Class
  /// </summary>
  class vNextMT {
     /// <summary>
    /// Constructor: sets first 5 properties
    /// </summary>
    public vNextMT() {}


    /// <summary>
    /// Get CLA and Json config options and set them in AppSettings object
    /// </summary>
    public async Task Run(AppSettings appSettings) {
      await appSettings.LoadJson();
      appSettings.Display();

      var fileContent = File.ReadAllText(appSettings.Json.InputFilePath);
      var parser = new Parser(fileContent, appSettings.Json);

      string legacyRule = string.Empty;

      // quark exp generations only supported in WPR
      if (! appSettings.CLA.IsAutoGeneratedRuleFile && ! appSettings.CLA.ShouldGenParams) {
        var sbRule = new StringBuilder();

        int count = 0;
        while( (legacyRule = parser.GetNextRule() ) != string.Empty) {
          var rule = parser.MigrateRule(legacyRule);
          sbRule.Append(rule);
          count++;
        }

        System.Console.WriteLine($"Processed {count} rules.");

        await File.WriteAllTextAsync(appSettings.Json.OutputFilePath, sbRule.ToString());
      }

      // Request Params to JSON file
      var requestParamOutFilePath = appSettings.Json.OutputFilePath.Substring(0,
          appSettings.Json.OutputFilePath.Length-8) + "params.json";

      // var paramSet = new SortedSet<string>();
      var paramSet = new HashSet<string>();
      while( (legacyRule = parser.GetNextRule(appSettings.CLA.IsAutoGeneratedRuleFile) ) != string.Empty) {
        var paramLine = parser.GetRequestParams(legacyRule, appSettings.CLA.IsAutoGeneratedRuleFile);
        if (! paramSet.Contains(paramLine))
          paramSet.Add(paramLine);
      }

      var sbRequestParams = new StringBuilder();
      sbRequestParams.Append("{\r\n" + string.Join(",\r\n", paramSet) + "\r\n}\r\n");

      await File.WriteAllTextAsync(requestParamOutFilePath, sbRequestParams.ToString());

      await SetOperationOnParams();
   }

   private async Task SetOperationOnParams() {
      var combinedParamsFilePath = "D:\\Doc\\Search\\vNext_Migration\\comb_exc_wpr.txt";
      var combParamSet = new HashSet<string>();

      using (var reader = File.OpenText(combinedParamsFilePath))
      {
        var line = string.Empty;

        while ((line = await reader.ReadLineAsync()) != null) {
          line = line.Trim(new char[]{' ', ','});
          if (!combParamSet.Contains(line))
            combParamSet.Add(line);
          else
            System.Console.WriteLine($"dup: {line}");
        }
      }


      var exceptParamsFilePath = "D:\\Doc\\Search\\vNext_Migration\\pages_groups_fuss_ld.txt";
      var exceptParamSet = new HashSet<string>();

      using (var reader = File.OpenText(exceptParamsFilePath))
      {
        var line = string.Empty;

        while ((line = await reader.ReadLineAsync()) != null) {
          line = line.Trim(new char[]{' ', ','});
          if (!exceptParamSet.Contains(line))
            exceptParamSet.Add(line);
          else
            System.Console.WriteLine($"dup: {line}");
        }
      }

      System.Console.WriteLine("Is SuperSet: " + combParamSet.IsSupersetOf(exceptParamSet));
      // System.Console.WriteLine(combParamSet.Count);
      // combParamSet.ExceptWith(exceptParamSet);
      System.Console.WriteLine(exceptParamSet.Count);
      exceptParamSet.ExceptWith(combParamSet);
      combParamSet = exceptParamSet;
      System.Console.WriteLine(combParamSet.Count);
      // System.Console.WriteLine(exceptParamSet.Count);
      // exceptParamSet.ExceptWith(combParamSet);
      // System.Console.WriteLine(exceptParamSet.Count);

      var resultFilePath = "D:\\Doc\\Search\\vNext_Migration\\SetExceptParamsOut.json";
      var sbRequestParams = new StringBuilder();
      sbRequestParams.Append("{\r\n    " + string.Join(",\r\n    ", combParamSet) + "\r\n}\r\n");
      await File.WriteAllTextAsync(resultFilePath, sbRequestParams.ToString());
   }
  }
}
